-- Query the sport and distinct number of athletes
SELECT 
	sport , count(distinct athlete_id) AS athletes
FROM summer_games
GROUP BY sport
-- Only include the 3 sports with the most athletes
ORDER BY athletes
LIMIT 3;

-- Query sport, events, and athletes from summer_games
SELECT 
	sport , 
    count(distinct event) AS events, 
    count(distinct athlete_id) AS athletes
FROM summer_games
GROUP BY sport;

-- Select the age of the oldest athlete for each region
SELECT 
	region, 
    MAX(age) AS age_of_oldest_athlete
FROM athletes AS a
-- First JOIN statement
JOIN summer_games AS s
ON a.id = s.athlete_id
-- Second JOIN statement
JOIN countries AS c
ON s.country_id = c.id
GROUP BY region;

-- Select sport and events for summer sports
SELECT 
	sport, 
    count(distinct event) AS events
FROM summer_games
group by sport
UNION
-- Select sport and events for winter sports
SELECT 
	sport, 
    count(distinct event) AS events
FROM winter_games
group by sport
-- Show the most events at the top of the report
order by events;

-- Update the query to explore the bronze field
select bronze
from summer_games;

-- Pull total_bronze_medals from summer_games below
SELECT sum(bronze) AS total_bronze_medals
FROM summer_games;

-- Pull athlete_name and gold_medals for summer games
-- Filter for only athletes with 3 gold medals or more
-- Sort to show the most gold medals at the top
select a.name as athlete_name, sum(gold) as gold_medals
from summer_games s
    inner join athletes a
    on s.athlete_id=a.id
where gold is not null
group by a.name
order by gold_medals desc
limit 6;

-- Pull distinct event names found in winter_games
SELECT distinct event
FROM winter_games;

-- Query season, country, and events for all summer events
SELECT 
    'summer' AS season, 
    c.country, 
   count(distinct s.event) AS events
FROM summer_games AS s
JOIN countries AS c
ON c.id=s.country_id
GROUP BY c.country
-- Combine the queries
union all
-- Query season, country, and events for all winter events
SELECT 
	'winter' AS season, 
    c.country, 
    count(distinct w.event) AS events
FROM winter_games AS w
JOIN countries AS c
ON c.id=w.country_id
GROUP BY c.country
-- Sort the results to show most events at the top
ORDER BY events desc;

-- Add outer layer to pull season, country and unique events
SELECT 
	season,
    country,
    count(distinct events) as events
FROM
    -- Pull season, country_id, and event for both seasons
    (SELECT 
     	'winter' AS season, 
     	country_id, 
     	event as events
    FROM winter_games w
    union all
    SELECT 
     	'summer' as season, 
        country_id, 
        event as events
    FROM summer_games s) AS subquery
JOIN countries AS c
ON subquery.country_id=c.id
-- Group by any unaggregated fields
GROUP BY country, season
-- Order to show most events at the top
ORDER BY events;

SELECT 
	name,
    -- Output 'Tall Female', 'Tall Male', or 'Other'
	CASE when gender = 'F' and height >=175 then 'Tall Female'
    when gender= 'M' and height >=190 then 'Tall Male'
    else 'Other' END AS segment
FROM athletes;

-- Pull in sport, bmi_bucket, and athletes
SELECT 
	sport,
    -- Bucket BMI in three groups: <.25, .25-.30, and >.30	
    CASE WHEN 100.0*weight/power(height,2)<0.25 THEN '<.25'
    WHEN 100.0*weight/power(height,2)<=0.30 THEN '.25-.30'
    WHEN 100.0*weight/power(height,2)>0.30 THEN '>.30' END AS bmi_bucket,
    count(distinct id) AS athletes
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id=a.id
-- GROUP BY non-aggregated fields
GROUP BY sport, bmi_bucket
-- Sort by sport and then by athletes in descending order
ORDER BY sport, athletes desc;

-- Show height, weight, and bmi for all athletes
SELECT 
	height,
    weight,
    bmi
FROM (
    select height,weight,
    weight/height^2*100 AS bmi
    from athletes
) as x
-- Filter for NULL bmi values
where bmi is null;

-- Uncomment the original query
SELECT 
	sport,
    CASE WHEN weight/height^2*100 <.25 THEN '<.25'
    WHEN weight/height^2*100 <=.30 THEN '.25-.30'
    WHEN weight/height^2*100 >.30 THEN '>.30'
    -- Add ELSE statement to output 'no weight recorded'
    else 'no weight recorded' END AS bmi_bucket,
    COUNT(DISTINCT athlete_id) AS athletes
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id = a.id
GROUP BY sport, bmi_bucket
ORDER BY sport, athletes DESC;

-- Pull summer bronze_medals, silver_medals, and gold_medals
SELECT 
	sum(bronze) bronze_medals, 
    sum(silver) silver_medals, 
    sum(gold) gold_medals
FROM summer_games AS s
JOIN athletes AS a
ON s.athlete_id=a.id
-- Filter for athletes age 16 or below
WHERE a.age<=16;

-- Pull summer bronze_medals, silver_medals, and gold_medals
SELECT 
	sum(bronze) bronze_medals, 
    sum(silver) silver_medals, 
    sum(gold) gold_medals
FROM summer_games
-- Add the WHERE statement below
WHERE athlete_id IN
    -- Create subquery list for athlete_ids age 16 or below    
    (SELECT id
     FROM athletes
     WHERE age<=16);

-- Pull event and unique athletes from summer_games 
SELECT 	
	event,
	count(distinct athlete_id) AS athletes
FROM summer_games
GROUP BY event;
